A package archive builder.

This is for building file based package archives. This is useful
for deploying small sets of under-development-packages in servers;
for example elnode packages.

An example:

{{{
(elpakit
 "/tmp/shoesoffsaas"
 '("~/work/elnode-auth"
   "~/work/emacs-db"
   "~/work/shoes-off"
   "~/work/rcirc-ssh"))
}}}

This should make a package archive in /tmp/shoesoffsaas which has
the 4 packages in it.

== Status ==

This is very alpha code. That doesn't mean it's the best. It means
it's crap.

I'm only just getting this going. It is vital to my world view though,
so do expect it to get better quickly.

== Packaging ==

To use elpakit your development tree must conform to a particular
standard.

Packages are directorys with either:

* a single elisp file in them which is the package file; a single-file
  package is constructed from these

* a single elisp file, which is the package file, and some form of
  README file; a single-file package is constructed from these

* a recipes directory containing a file named for the package (eg:
  "elnode", it can also be different from the dev dir, eg: "emacs-db"
  might have a "recipes/db" recipe file). The recipes file //broadly//
  follows the MELPA conventions. It mostly specifies the {{{:files}}}
  in the dev directory which belong to the package. 

  There must be only one elisp file in the recipe for a recipe dev
  directory to be considered a single-file package.

* a recipes directory, just as above, but containing many elisp files;
  these are considered tar packages and are built as such.


== Recipe files ==

The recipe format is based on the MELPA format but extended to include
the extra meta-data required by tar packages.

Here are some examples for now.

{{{db}}} is a single file package, but the repository directory
includes a tests file and the README:

{{{
(db
 :files ("db.el"))
}}}

this is probably the most common form of recipe. It's needed quite a
lot because there is not enough intelligence in elpakit about what is
in a repository directory.

{{{elnode}}} is a tar package and has quite a lot of complexity:

{{{
(elnode
 :version "0.9.9.6.1"
 :doc "The Emacs webserver."
 :requires ((web "0.1.4")
            (db "0.0.1")
            (kv "0.0.9")
            (fakir "0.0.14")
            (creole "0.8.14"))
 :files ("elnode.el" 
         "elnode-tests.el"
         "elnode-rle.el"
         "elnode-wiki.el"
         "default-wiki-index.creole"
         "default-webserver-test.html"
         "default-webserver-image.png"
         "README.a"
         "COPYING"))
}}}


== Notes on the differences with MELPA ==

I hope to merge much of this with MELPA. The MELPA guys are cool, I
think it will be doable.

MELPA's code was not portable enough for me, quickly enough, to do
what I needed. So I have duplicated lots of functionality. Hopefully
we can de-duplicate in the future.

The MELPA recipe standard has no:

* version
* doc
* requires

as far as I can see. These have been added to elpakit make the task of
building tar files possible.

A side aim for elpakit is that it makes defining a package part a
function of the package's source control. Just like it normally is
with other package systems (dpkg, rpm, pip, etc...).

MELPA doesn't even need the version since it pulls it from the GIT
commit?

== Useful tips ==

There are a bunch of useful things you can do if you're building apps
that are collections of elpa packages.

=== Evaling an elpakit ===

You can build an elpakit entirely inside your emacs. This basically
means just evaling all the lisp it finds.

{{{
(elpakit-eval   
 '("~/work/elnode-auth"
   "~/work/emacs-db"
   "~/work/shoes-off"
   "~/work/rcirc-ssh"))
}}}

Sometimes you have to muck about with the ordering of the kit to make
it work because there are dependancies (requires) that don't work
unless you eval things in a particular order.

=== Defining kits to be reusable ===

Just collecting the list of package directories into a list means you
can do lots of different things with elpakit:

{{{
(defconst shoes-off-elpakit
  '("~/work/shoes-off"
    "~/work/rcirc-ssh"
    "~/work/emacs-db"
    "~/work/esxml"
    "~/work/elnode-auth"
    "~/work/emacs-kv"
    "~/work/shoes-off-aas/talkapp"))
}}}

If you use a {{{defconst}}} then you can re-eval it more easily.


=== Building kits remotely ===

If you want to deploy to a remote host without pushing to an official
repository you can still do that, just use tramp for the destination:

{{{
(elpakit
 "/ssh:nic@livehost.example.com:apps/app1/app-elpa"
 my-elpakit)
}}}

Presuming {{{my-elpakit}}} is an elpakit list. Elpakit uses a straight
copy so tramp works fine.

== TODO ==

* add more intelligence to {{{elpakit/do}}} to allow it to see
  single-file package directories when:
** there is a package lisp file, a README and a tests lisp file
** there is a package lisp file, a README and a //package-name//-tests lisp file
** any other oft-used combination that makes sense
* add a constructor for recipe files?
* add a mode for editing recipe files?
